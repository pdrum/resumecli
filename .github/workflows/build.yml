name: Build Application

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag for release (optional)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14] # macos-14 is Apple Silicon
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos-intel
          - os: macos-14
            platform: macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgirepository1.0-dev \
            gobject-introspection \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev \
            libffi-dev \
            shared-mime-info \
            libharfbuzz-dev \
            libfreetype-dev \
            libpixman-1-dev \
            libfontconfig-dev

          # Set Linux environment variables
          echo "GI_TYPELIB_PATH=/usr/lib/x86_64-linux-gnu/girepository-1.0" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew install gobject-introspection cairo pango gdk-pixbuf libffi

          # Set macOS environment variables
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV
          echo "GI_TYPELIB_PATH=$(brew --prefix)/lib/girepository-1.0" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Application
        run: |
          # Clean and build with PyInstaller
          rm -rf build dist
          pyinstaller resumecli.spec

          # Setup runtime environment
          cp runtime_wrapper.sh dist/resumecli/
          chmod +x dist/resumecli/runtime_wrapper.sh

          # Create platform-specific launchers
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # Create macOS launcher in the distribution directory
            cat > dist/resumecli/resumecli.command << 'CMDEOF'
            #!/bin/bash
            # Launch resumecli with the proper environment
            DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
            "$DIR/runtime_wrapper.sh" "$@"
            CMDEOF
            chmod +x dist/resumecli/resumecli.command

            # Create macOS launcher script
            cat > resumecli-${{ matrix.platform }}.sh << 'EOF'
            #!/bin/bash
            # resumecli for macOS

            # Check for homebrew
            if ! command -v brew &> /dev/null; then
                echo "Homebrew is not installed. Please install it from https://brew.sh"
                exit 1
            fi

            # Install dependencies
            echo "Installing required dependencies..."
            brew install gobject-introspection cairo pango gdk-pixbuf libffi

            # Set environment variables
            export HOMEBREW_PREFIX="$(brew --prefix)"
            export DYLD_FALLBACK_LIBRARY_PATH="$HOMEBREW_PREFIX/lib"
            export PKG_CONFIG_PATH="$HOMEBREW_PREFIX/lib/pkgconfig"
            export GI_TYPELIB_PATH="$HOMEBREW_PREFIX/lib/girepository-1.0"

            # Get the script directory
            DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

            # Find and execute the resumecli application
            for EXECUTABLE_PATH in "$DIR/resumecli/resumecli.command" "$DIR/dist/resumecli/resumecli.command"; do
                if [ -f "$EXECUTABLE_PATH" ]; then
                    "$EXECUTABLE_PATH" "$@"
                    exit 0
                fi
            done

            # Error if executable not found
            echo "Error: resumecli executable not found"
            echo "Searched in:"
            echo "  - $DIR/resumecli/resumecli.command"
            echo "  - $DIR/dist/resumecli/resumecli.command"
            echo "Current directory structure:"
            find "$DIR" -type f -name "resumecli*" 2>/dev/null || echo "No resumecli files found"
            exit 1
            EOF
          else
            # Create Linux launcher in the distribution directory
            cat > dist/resumecli/resumecli.sh << 'SHEOF'
            #!/bin/bash
            # Launch resumecli with the proper environment
            DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
            "$DIR/runtime_wrapper.sh" "$@"
            SHEOF
            chmod +x dist/resumecli/resumecli.sh

            # Create Linux launcher script
            cat > resumecli-${{ matrix.platform }}.sh << 'EOF'
            #!/bin/bash
            # resumecli for Linux

            # Check for sudo
            if ! command -v sudo &> /dev/null; then
                echo "This script requires 'sudo' to install dependencies."
                exit 1
            fi

            # Install dependencies
            echo "Installing required dependencies..."
            sudo apt-get update
            sudo apt-get install -y \
              libgirepository1.0-dev \
              gobject-introspection \
              libcairo2-dev \
              libpango1.0-dev \
              libgdk-pixbuf2.0-dev \
              libffi-dev \
              shared-mime-info

            # Set environment variables
            export GI_TYPELIB_PATH="/usr/lib/x86_64-linux-gnu/girepository-1.0"
            export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"

            # Get the script directory
            DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

            # Find and execute the resumecli application
            for EXECUTABLE_PATH in "$DIR/resumecli/resumecli.sh" "$DIR/dist/resumecli/resumecli.sh"; do
                if [ -f "$EXECUTABLE_PATH" ]; then
                    "$EXECUTABLE_PATH" "$@"
                    exit 0
                fi
            done

            # Error if executable not found
            echo "Error: resumecli executable not found"
            echo "Searched in:"
            echo "  - $DIR/resumecli/resumecli.sh"
            echo "  - $DIR/dist/resumecli/resumecli.sh"
            echo "Current directory structure:"
            find "$DIR" -type f -name "resumecli*" 2>/dev/null || echo "No resumecli files found"
            exit 1
            EOF
          fi

          chmod +x resumecli-${{ matrix.platform }}.sh

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: resumecli-${{ matrix.platform }}
          path: |
            resumecli-${{ matrix.platform }}.sh
            dist/

  release:
    name: Create Release
    needs: build
    if: inputs.release_tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Files
        run: |
          mkdir -p release

          # Create self-contained archives for each platform
          for PLATFORM in linux macos-intel macos-arm64; do
            echo "Preparing $PLATFORM package..."

            # Prepare directory structure
            mkdir -p temp/$PLATFORM
            cp artifacts/resumecli-$PLATFORM/resumecli-$PLATFORM.sh temp/$PLATFORM/resumecli.sh
            chmod +x temp/$PLATFORM/resumecli.sh
            cp -r artifacts/resumecli-$PLATFORM/dist temp/$PLATFORM/

            # Ensure all scripts are executable
            if [ "$PLATFORM" == "linux" ]; then
              find temp/$PLATFORM -type f -name "*.sh" -exec chmod +x {} \;
              chmod +x temp/$PLATFORM/dist/resumecli/resumecli 2>/dev/null || true
            else
              find temp/$PLATFORM -type f -name "*.command" -exec chmod +x {} \;
              find temp/$PLATFORM -type f -name "*.sh" -exec chmod +x {} \;
              chmod +x temp/$PLATFORM/dist/resumecli/resumecli 2>/dev/null || true
            fi

            # Create platform-specific archive
            cd temp/$PLATFORM
            if [ "$PLATFORM" == "linux" ]; then
              tar -czf ../../release/resumecli-$PLATFORM.tar.gz .
            else
              zip -r ../../release/resumecli-$PLATFORM.zip .
            fi
            cd ../../
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: Release ${{ github.event.inputs.release_tag }}
          draft: false
          prerelease: false
          files: |
            release/resumecli-linux.tar.gz
            release/resumecli-macos-intel.zip
            release/resumecli-macos-arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

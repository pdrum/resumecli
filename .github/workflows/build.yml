name: Build Application

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag for release (optional)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 (Intel)
          - os: ubuntu-latest
            platform: linux-intel
            arch: x64
          # Linux Arm64
          - os: ubuntu-latest
            platform: linux-arm64
            arch: arm64
          # macOS Intel
          - os: macos-latest
            platform: macos-intel
          # macOS Arm64 (Apple Silicon)
          - os: macos-14
            platform: macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.platform, 'linux-')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgirepository1.0-dev \
            gobject-introspection \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev \
            libffi-dev \
            shared-mime-info \
            libharfbuzz-dev \
            libfreetype-dev \
            libpixman-1-dev \
            libfontconfig-dev \
            binutils

          # Set Linux environment variables
          echo "GI_TYPELIB_PATH=/usr/lib/x86_64-linux-gnu/girepository-1.0" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew install gobject-introspection cairo pango gdk-pixbuf libffi

          # Set macOS environment variables
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV
          echo "GI_TYPELIB_PATH=$(brew --prefix)/lib/girepository-1.0" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      # Setup QEMU emulation for ARM64 cross-builds
      - name: Setup QEMU
        if: matrix.platform == 'linux-arm64'
        uses: docker/setup-qemu-action@v2
      - name: Setup Docker Buildx
        if: matrix.platform == 'linux-arm64'
        uses: docker/setup-buildx-action@v2

      - name: Build Application
        run: |
          # Clean previous build artifacts
          rm -rf build dist
          # Build with PyInstaller: use Docker for arm64, native for others
          if [[ "${{ matrix.platform }}" == "linux-arm64" ]]; then
            docker run --rm --platform linux/arm64 -v "$PWD":/work -w /work python:3.10-slim bash -c "apt-get update && apt-get install -y binutils && pip install -r requirements.txt && pip install pyinstaller && pyinstaller resumecli.spec && chown -R $(id -u):$(id -g) dist"
          else
            pyinstaller resumecli.spec
          fi

          # Setup runtime environment
          cp runtime_wrapper.sh dist/resumecli/
          chmod +x dist/resumecli/runtime_wrapper.sh

          # Create platform-specific launchers
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # Copy macOS launcher to the distribution directory
            cp scripts/macos_launcher.command dist/resumecli/resumecli.command
            chmod +x dist/resumecli/resumecli.command

            # Copy macOS wrapper script with platform suffix
            cp scripts/macos_wrapper.sh resumecli-${{ matrix.platform }}.sh
            chmod +x resumecli-${{ matrix.platform }}.sh
          else
            # Copy Linux launcher to the distribution directory
            cp scripts/linux_launcher.sh dist/resumecli/resumecli.sh
            chmod +x dist/resumecli/resumecli.sh

            # Copy Linux wrapper script with platform suffix
            cp scripts/linux_wrapper.sh resumecli-${{ matrix.platform }}.sh
            chmod +x resumecli-${{ matrix.platform }}.sh
          fi

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: resumecli-${{ matrix.platform }}
          path: |
            resumecli-${{ matrix.platform }}.sh
            dist/

  release:
    name: Create Release
    needs: build
    if: inputs.release_tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download each platform artifact into separate folders
      - name: Download Linux Intel Artifact
        uses: actions/download-artifact@v4
        with:
          name: resumecli-linux-intel
          path: artifacts/linux-intel
      - name: Download Linux Arm64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: resumecli-linux-arm64
          path: artifacts/linux-arm64
      - name: Download macOS Intel Artifact
        uses: actions/download-artifact@v4
        with:
          name: resumecli-macos-intel
          path: artifacts/macos-intel
      - name: Download macOS Arm64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: resumecli-macos-arm64
          path: artifacts/macos-arm64

      - name: Prepare Release Files
        run: |
          mkdir -p release

          # Create self-contained archives for each platform
          for PLATFORM in linux-intel linux-arm64 macos-intel macos-arm64; do
            echo "Preparing $PLATFORM package..."

            # Prepare directory structure
            mkdir -p temp/$PLATFORM
            cp artifacts/$PLATFORM/resumecli-$PLATFORM.sh temp/$PLATFORM/resumecli.sh
            chmod +x temp/$PLATFORM/resumecli.sh
            cp -r artifacts/$PLATFORM/dist temp/$PLATFORM/

            # Ensure all scripts are executable
            if [[ "$PLATFORM" == linux-* ]]; then
              find temp/$PLATFORM -type f -name "*.sh" -exec chmod +x {} \;
              chmod +x temp/$PLATFORM/dist/resumecli/resumecli 2>/dev/null || true
            else
              find temp/$PLATFORM -type f -name "*.command" -exec chmod +x {} \;
              find temp/$PLATFORM -type f -name "*.sh" -exec chmod +x {} \;
              chmod +x temp/$PLATFORM/dist/resumecli/resumecli 2>/dev/null || true
            fi

            # Create platform-specific archive
            cd temp/$PLATFORM
            if [[ "$PLATFORM" == linux-* ]]; then
              tar -czf ../../release/resumecli-$PLATFORM.tar.gz .
            else
              zip -r ../../release/resumecli-$PLATFORM.zip .
            fi
            cd ../../
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: Release ${{ github.event.inputs.release_tag }}
          draft: false
          prerelease: false
          files: |
            release/resumecli-linux-intel.tar.gz
            release/resumecli-linux-arm64.tar.gz
            release/resumecli-macos-intel.zip
            release/resumecli-macos-arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
